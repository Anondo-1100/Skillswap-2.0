import { useState, useEffect } from 'react';
import { useNavigate, useLocation, Link } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import type { AuthResponse } from '../types/auth';
import VerificationButton from '../components/layout/VerificationButton';
import PasswordResetButton from '../components/layout/PasswordResetButton';
import GoogleSignInButton from '../components/layout/GoogleSignInButton';
import { AlertCircle, CheckCircle2 } from 'lucide-react';

const LoginPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { login, loadingState } = useAuth();
  
  const [email, setEmail] = useState(() => {
    return location.state?.email || 
           localStorage.getItem('verificationEmail') || 
           localStorage.getItem('lastRegisteredEmail') || 
           '';
  });
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const verificationMessage = location.state?.verificationMessage || 
    (localStorage.getItem('pendingVerification') ? 'Please check your email and verify your account before logging in.' : '');

  useEffect(() => {
    if (localStorage.getItem('pendingVerification')) {
      const timeoutId = setTimeout(() => {
        localStorage.removeItem('pendingVerification');
        localStorage.removeItem('verificationEmail');
      }, 30000);
      return () => clearTimeout(timeoutId);
    }
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (loadingState.login) return;

    try {
      setError('');
      const response: AuthResponse = await login(email, password);
      
      if (response.status === 'error') {
        if (response.message.includes('verify your email')) {
          setError('Please verify your email before logging in. Check your inbox for the verification link.');
          localStorage.removeItem('lastRegisteredEmail');
          return;
        }
        setError(response.message);
        return;
      }

      localStorage.removeItem('lastRegisteredEmail');
      localStorage.removeItem('pendingVerification');
      localStorage.removeItem('verificationEmail');
      
      navigate('/');
    } catch (error) {
      setError('Failed to login. Please check your credentials.');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md">
        <div>
          <h2 className="text-center text-3xl font-bold text-gray-900 dark:text-white">Sign in to your account</h2>
          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Or{' '}
            <Link to="/register" className="font-medium text-teal-600 hover:text-teal-500 dark:text-teal-400 dark:hover:text-teal-300">
              create a new account
            </Link>
          </p>
        </div>

        {verificationMessage && (
          <div className="bg-teal-50 dark:bg-teal-900/30 p-4 rounded-md text-teal-800 dark:text-teal-200 text-sm flex items-start">
            <CheckCircle2 className="h-5 w-5 text-teal-400 mt-0.5 mr-2 flex-shrink-0" />
            <span>{verificationMessage}</span>
          </div>
        )}

        {error && (
          <div className="bg-red-50 dark:bg-red-900/30 p-4 rounded-md text-red-800 dark:text-red-200 text-sm flex items-start">
            <AlertCircle className="h-5 w-5 text-red-400 mt-0.5 mr-2 flex-shrink-0" />
            <span>{error}</span>
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email-address" className="sr-only">Email address</label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white rounded-t-md focus:outline-none focus:ring-teal-500 focus:border-teal-500 dark:focus:ring-teal-400 dark:focus:border-teal-400 focus:z-10 sm:text-sm dark:bg-gray-800"
                placeholder="Email address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">Password</label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white rounded-b-md focus:outline-none focus:ring-teal-500 focus:border-teal-500 dark:focus:ring-teal-400 dark:focus:border-teal-400 focus:z-10 sm:text-sm dark:bg-gray-800"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center">
              <VerificationButton 
                email={email}
                className="font-medium text-teal-600 hover:text-teal-500 dark:text-teal-400 dark:hover:text-teal-300" 
              />
            </div>
            <div>
              <PasswordResetButton
                email={email}
                className="font-medium text-teal-600 hover:text-teal-500 dark:text-teal-400 dark:hover:text-teal-300"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loadingState.login}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loadingState.login && (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              )}
              Sign in
            </button>
          </div>

          <div className="mt-4 relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300 dark:border-gray-600"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white dark:bg-gray-800 text-gray-500">Or continue with</span>
            </div>
          </div>

          <div className="mt-4">
            <GoogleSignInButton onError={setError} />
          </div>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;
